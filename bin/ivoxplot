#!/usr/bin/python
# Written by Willem Onderwaater and Sander Roobol as part of a collaboration
# between the ID03 beamline at the European Synchrotron Radiation Facility and
# the Interface Physics group at Leiden University.

import sys
import os
import argparse
import numbers
import numpy
import matplotlib.pyplot as pyplot
import matplotlib.colors

import ivoxoar.space




if __name__ == "__main__":
    parser = argparse.ArgumentParser(prog='ivoxplot')
    parser.add_argument('infile')
    parser.add_argument('-s', '--savepdf', action='store_true')
    parser.add_argument('-c', '--clip', default = 0.00)
    parser.add_argument('-p', '--project', default=False)
    parser.add_argument('--ecs', action='store_true', help='extend color scale to whole mesh not just the to be plotted data')
    parser.add_argument('--slice', nargs=2, default=False)
    parser.add_argument('--savefile')
    
    args = parser.parse_args()

    space = ivoxoar.space.Space.fromfile(args.infile)

    clipping = float(args.clip)
    mesh = space.get_masked()
    axes = space.axes
    del space

    # project automatically onto the smallest dimension or from command line argument

    remaining = range(len(axes))
    
    if args.slice and len(axes) == 3:
        s = [slice(None)] * 3
        axlabels = [ax.label.lower() for ax in axes]
        if args.slice[0].lower() in axlabels:
            projected = axlabels.index(args.slice[0].lower())
        if ':' in args.slice[1]:
            mi,ma = args.slice[1].split(':')
            if mi == '':
                mi = axes[projected].min
            if ma == '':
                ma = axes[projected].max
            s[projected] = slice(axes[projected].get_index(float(mi)), axes[projected].get_index(float(ma)))
            data = mesh[s].mean(axis = projected)
        else:
            index = axes[projected].get_index(float(args.slice[1]))
            s[projected] = index
            data = mesh[s].copy() # make a copy so the rest of the mesh can be released from memory
        info = ' sliced at {0} = {1}'.format(axes[projected].label, args.slice[1])
        remaining.pop(projected)

    elif len(remaining) == 3:
        if args.project:
            axlabels = [ax.label.lower() for ax in axes]
            if args.project.lower() in axlabels:
                projected = axlabels.index(args.project.lower())
        else:
            projected = numpy.argmin(mesh.shape)
        info = ' projected on {0}'.format(axes[projected].label)
        remaining.pop(projected)
 
        data = mesh.mean(axis=projected)
    else:
        data = mesh

    if args.ecs:
        colordata = mesh
    else:
        colordata = data
    del mesh

    colordata.mask[colordata == 0] = 1
    colordata = colordata.compressed()

    if args.clip:
        chop = int(round(colordata.size * clipping))
        clip = sorted(colordata)[chop:-(1+chop)]
        vmin, vmax = clip[0], clip[-1]
        del clip
    else:
        vmin, vmax = colordata.min(),colordata.max()
    del colordata

    xmin = axes[remaining[0]].min
    xmax = axes[remaining[0]].max
    ymin = axes[remaining[1]].min
    ymax = axes[remaining[1]].max
    
    pyplot.figure(figsize=(12,9))
    pyplot.imshow(data.transpose(), origin='lower', extent=(xmin, xmax, ymin, ymax), aspect='auto', norm=matplotlib.colors.LogNorm(vmin,vmax))

    pyplot.xlabel(axes[remaining[0]].label)
    pyplot.ylabel(axes[remaining[1]].label)
    pyplot.suptitle('{0}{1}'.format(os.path.splitext(args.outfile)[0], info))
    pyplot.colorbar()
    
    if args.savepdf or args.savefile:
        if args.savefile:
            pyplot.savefig(args.savefile)
            print 'saved at {0}'.format(args.savefile)
        else:
            pyplot.savefig('{0}.pdf'.format(os.path.splitext(args.outfile)[0]))
            print 'saved at {0}.pdf'.format(os.path.splitext(args.outfile)[0])
    else:
        pyplot.show()
