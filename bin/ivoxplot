#!/usr/bin/python
# Written by Willem Onderwaater and Sander Roobol as part of a collaboration
# between the ID03 beamline at the European Synchrotron Radiation Facility and
# the Interface Physics group at Leiden University.

import sys
import os
import argparse
import numbers
import numpy
import matplotlib.pyplot as pyplot
import matplotlib.colors

import ivoxoar.space


if __name__ == "__main__":
    parser = argparse.ArgumentParser(prog='ivoxplot')
    parser.add_argument('infile')
    parser.add_argument('-s', '--savepdf', action='store_true')
    parser.add_argument('-c', '--clip', default = 0.00)
    parser.add_argument('-p', '--project', action='append', default=[])
    parser.add_argument('--nolog', action='store_true')
    parser.add_argument('--ecs', action='store_true', help='extend color scale to whole mesh not just the to be plotted data')
    parser.add_argument('--slice', nargs=2, action='append', default=[])
    parser.add_argument('--savefile')
    parser.add_argument('--subtract')
    
    args = parser.parse_args()

    space = ivoxoar.space.Space.fromfile(args.infile)
    if args.subtract:
        diffspace = ivoxoar.space.Space.fromfile(args.subtract)
        space -= diffspace
        del diffspace
        args.nolog = True

    orgspace = space # for --ecs

    info = ''


    # SLICING
    for sl in args.slice:
        ax, key = sl
        axindex = space.get_axindex_by_label(ax)
        axlabel = space.axes[axindex].label
        if ':' in key:
            start, stop = key.split(':')
            if start:
                start = float(start.replace('m', '-'))
            else:
                start = space.axes[axindex].min
            if stop:
                stop = float(stop.replace('m', '-'))
            else:
                stop = space.axes[axindex].max
            key = slice(start, stop)

            info += ' sliced in {0} from {1} to {2}'.format(axlabel, start, stop)
        else:
            key = float(key.replace('m', '-'))
            info += ' sliced in {0} at {1}'.format(axlabel, key)
        olddim = space.dimension
        space = space.slice(axindex, key)
        if space.dimension == olddim:
            space = space.project(axindex)


    # PROJECTION
    for proj in args.project:
        projectaxis = space.get_axindex_by_label(proj)
        info += ' projected on {0}'.format(space.axes[projectaxis].label)
        space = space.project(projectaxis)

    if space.dimension == 3: # automatic projection on smallest axis
        projectaxis = numpy.argmin(space.photons.shape)
        info += ' projected on {0}'.format(space.axes[projectaxis].label)
        space = space.project(projectaxis)

    # CHOOSE PLOT TYPE BASED ON DIMENSIONALITY
    if space.dimension == 1:
        data = space.get_masked()
        xrange = space.axes[0][:]
        if args.nolog:
            pyplot.plot(xrange, data)
        else:
            pyplot.semilogy(xrange, data)
        
        pyplot.xlabel(space.axes[0].label)
        pyplot.ylabel('Intensity (a.u.)')

    elif space.dimension == 2:
        # COLOR CLIPPING
        clipping = float(args.clip)

        if args.ecs:
            colorspace = orgspace
        else:
            colorspace = space
        colordata = colorspace.get_masked()
        colordata.mask[colordata == 0] = 1
        colordata = colordata.compressed()

        if args.clip:
            chop = int(round(colordata.size * clipping))
            clip = sorted(colordata)[chop:-(1+chop)]
            vmin, vmax = clip[0], clip[-1]
            del clip
        else:
            vmin, vmax = colordata.min(),colordata.max()
        del colordata, colorspace

        # 2D IMSHOW PLOT
        data = space.get_masked()

        xmin = space.axes[0].min
        xmax = space.axes[0].max
        ymin = space.axes[1].min
        ymax = space.axes[1].max
        
        pyplot.figure(figsize=(12,9))
        if args.nolog:
            norm = matplotlib.colors.Normalize(vmin, vmax)
        else:
            norm = matplotlib.colors.LogNorm(vmin, vmax)
        pyplot.imshow(data.transpose(), origin='lower', extent=(xmin, xmax, ymin, ymax), aspect='auto', norm=norm)

        pyplot.xlabel(space.axes[0].label)
        pyplot.ylabel(space.axes[1].label)
        pyplot.colorbar()

    elif space.dimension > 2:
        print "Cannot plot 3 or higher dimensional spaces.\nUse --project and or --slice to decrease dimensionality."
        sys.exit(1)

    pyplot.suptitle('{0}{1}'.format(os.path.splitext(args.infile)[0], info))
    
    if args.savepdf or args.savefile:
        if args.savefile:
            pyplot.savefig(args.savefile)
            print 'saved at {0}'.format(args.savefile)
        else:
            pyplot.savefig('{0}.pdf'.format(os.path.splitext(args.infile)[0]))
            print 'saved at {0}.pdf'.format(os.path.splitext(args.infile)[0])
    else:
        pyplot.show()
